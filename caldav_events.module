<?php

/**
 * Return this's module name appended by an underscore.
 *
 * Use it to form module's keys in forms or variables.
 *
 */
function _() {
  return 'caldav_events_';
}

/**
 * CalDav Events, drupal module
 *
 * Naming Conventions:
 *   * Only lowercase and underscore
 *   * Drupral hooks are named `caldav_events_hookname`
 *   * Private functions are named `_caldav_events_functioname` (except for _())
 *   * Public functions (available to other modules) are named `caldav_events_api_functionname`
 *
 */

module_load_include('php', 'caldav_events', 'inc/connect');

/**
 * Implements hook_help.
 *
 * Displays help and module information.
 *
 * @param path
 *   Which path of the site we're using to display help
 * @param arg
 *   Array that holds the current path as returned from arg() function
 */
function caldav_events_help($path, $arg) {
  switch ($path) {
  case "admin/help#caldav_events":
    return '<p>' . t("Write an email (with proper subject) to: juanmi@jmcejuela.com") . '</p>';
    break;
  }
}

function caldav_events_block_info() {
  $blocks['caldav_events_hello_world'] =
    array(
          'info' => t('Hello World'), //block name
          'cache' => DRUPAL_CACHE_PER_ROLE,
          );
  return $blocks;
}

function caldav_events_block_view($delta = '') {
  switch ($delta) {
  case 'caldav_events_hello_world':
    $block['subject'] = t('Hello World');
    if (user_access('access content')) {
      $block['content'] = '<p>' . t(_caldav_events_hello_world(variable_get('caldav_events_username', 'World'))) . '</p>';
    }
    return $block;
  }
}

function _caldav_events_hello_world($name = "World") {
  return "Hello $name!\n";
}

function caldav_events_menu() {
  $items = array();
  $items['admin/config/content/caldav_events'] =
    array(
          'title' => 'CalDav Events',
          'page callback' => 'drupal_get_form',
          'page arguments' => array('caldav_events_form'),
          'access arguments' => array('access administration pages'),
          'type' => MENU_NORMAL_ITEM,
          );

  return $items;
}

function caldav_events_form($form, &$form_state) {
  $form =
    array(
          _().'server_url' =>
          array(
                '#type' => 'textfield',
                '#title' => t('CalDAV Server URL'),
                '#default_value' => variable_get(_().'server_url'),
                '#size' => 80,
                '#description' => t('CalDAV server to connect to'),
                '#required' => true),

          _().'server_username' =>
          array(
                '#type' => 'textfield',
                '#title' => t('Username'),
                '#default_value' => variable_get(_().'server_username'),
                '#size' => 32,
                '#description' => t('Username to connect to the CalDAV server'),
                '#required' => true),

          _().'server_password' =>
          array(
                '#type' => 'textfield',
                '#title' => t('Password'),
                //'#default_value' => variable_get(_().'server_password'), //do
                //not show the password for now
                '#size' => 32,
                '#description' => t('Password to connec to the CalDAV server'),
                '#required' => true),

          _().'event_name' =>
          array(
                '#type' => 'textfield',
                '#title' => t('Event Name'),
                '#default_value' => variable_get(_().'event_name'),
                '#size' => 32,
                '#description' => t('Search in calendar events containing the given name'),
                '#required' => true),

          _().'event_start' =>
          array(
                '#type' => 'textfield',
                '#title' => t('Start'),
                '#default_value' => variable_get(_().'event_start'),
                '#size' => 16,
                '#description' => t('Search in calendar events starting from this time'),
                '#required' => true),

          _().'event_end' =>
          array(
                '#type' => 'textfield',
                '#title' => t('End'),
                '#default_value' => variable_get(_().'event_end'),
                '#size' => 16,
                '#description' => t('Search in calendar events until this time'),
                '#required' => true),
          );

  return system_settings_form($form);
}

function caldav_events_form_validate($form, &$form_state) {
  $v = $form_state['values'];

  if ($v[_().'server_url'] && $v[_().'server_username'] && $v[_().'server_password'] && $v[_().'event_name'] && $v[_().'event_start'] && $v[_().'event_end']) {
    variable_set(_().'server_data_given', true);
  } else {
    //form_set_error('caldav_events_name', t('...'));
  }
}

function _caldav_events_create_new_node($title, $body = "") {
  $node = new stdClass();
  $node->type = 'page';
  $node->language = variable_get('language_default', 'und');
  $node->title = $title;
  //
  $node->body[$node->language][0]['value']   = $body;
  $node->body[$node->language][0]['summary'] = text_summary($body);

  node_object_prepare($node);
  node_save($node);
}

function caldav_events_cron() {
  $queue = DrupalQueue::get('caldav_events_queue_1');
  $queue->createItem("miau miau");
}

function caldav_events_cron_queue_info() {
  $queues['caldav_events_queue_1'] =
    array(
          'worker callback' => '_caldav_events_read_servers',
          'time' => 20, // Maximum allowed time to run, in seconds
          );
  return $queues;
}

function _caldav_events_read_servers($item) {
  if (variable_get(_().'server_data_given', false)) {
    $params =
      array (
             'url' => variable_get(_().'server_url'),
             'username' => variable_get(_().'server_username'),
             'password' => variable_get(_().'server_password'),
             'event_name' => variable_get(_().'event_name'),
             'event_start' => variable_get(_().'event_start'),
             'event_end' => variable_get(_().'event_end')
             );

    $events = connect($params);
    watchdog('caldav_events', '# events: '.sizeof($events));
  }
}

/* ?> Omitted closing tag, as recommended by: https://drupal.org/node/1074362 */