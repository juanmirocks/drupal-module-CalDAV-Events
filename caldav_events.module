<?php

/**
 * CalDav Events, drupal module
 *
 * Naming Conventions:
 *
 * * Only lowercase and underscore
 * * Drupral hooks are named `caldav_events_hookname`
 * * Private functions are prefixed with '_caldav_events_'
 * * Public functions (available to other modules) are named `caldav_events_api_functionname`
 *
 *
 * Developing:
 *
 * * [Activate, show all error messages](https://drupal.org/node/1056468)
 * * Easiest functions to debug:
 * *  * `watchdog(_caldav_events(), 'error message...');` //prints to standard output
 * *  * `debug('error_message...', _caldav_events(), true);` //show message on page
 *
 */

module_load_include('php', 'caldav_events', 'inc/connect');

/**
 * Implements hook_help.
 *
 * Displays help and module information.
 *
 * @param path
 *   Which path of the site we're using to display help
 * @param arg
 *   Array that holds the current path as returned from arg() function
 */
function caldav_events_help($path, $arg) {
  switch ($path) {
  case 'admin/help#caldav_events':
    return '<p>'.t("Write an email (with proper subject) to: juanmi@jmcejuela.com").'</p>';
  }
}

function caldav_events_theme() {
  return array(
               'caldav_events_single' =>
               array('template' => 'caldav-events-single',
                     'pattern' => 'caldav_events_single__',
                     'variables' => _caldav_events_variables_init()),

               'caldav_events_list' =>
               array('template' => 'caldav-events-list',
                     'pattern' => 'caldav_events_list__',
                     'variables' => array('items' => array())));
}

function _caldav_events_variables_init($event = NULL) {
  if ($event) {
    $vars = array('summary' => $event->summary(),
                  'description' => $event->description(),
                  'location' => $event->location(),
                  'start_date' => $event->start(),
                  'end_date' => $event->end(),
                  'attendees' => $event->attendees(),
                  'status' => 'same');
  } else {
    $vars = array('summary' => '',
                  'description' => '',
                  'location' => '',
                  'start_date' => NULL,
                  'end_date' => NULL,
                  'attendees' => '',
                  'status' => 'same');
  }

  return $vars;
}

function _caldav_events_variables_preprocess($event_name, &$vars) {
  $vars['unprefixed_summary'] = _caldav_events_unprefixed_summary($event_name, $vars['summary']);
  $vars['status_legend']      = _caldav_events_status_legend($vars['status']);
  $vars['start_date_Md']      = $vars['start_date']->format('M d');
  $vars['start_date_hour24']  = $vars['start_date']->format('H:i');

  return $vars;
}

function _caldav_events_unprefixed_summary($event_name, $summary) {
  if (preg_match('/^'.$event_name.'\W*(\w.*)$/i', $summary, $matches)) {
    return $matches[1];
  } else {
    return $summary;
  }
}

function _caldav_events_status_legend($status) {
  switch($status) {
  case 'same':
  case 'new':
    return '';
  case 'modified':
    return '(updated) ';
  case 'deleted':
    return '(CANCELLED) ';
  default:
    watchdog(_caldav_events(), "_prefix_title called with unexpected status: $status");
    return '';
  }
}

function _caldav_events_variables_ui($vars) {
  $ui_vars = array();
  foreach($vars as $k => $v) {
    if (is_string($v)) {
      $ui_vars["!$k"] = check_plain($v);
    }
  }
  return $ui_vars;
}

function template_preprocess_caldav_events_single(&$variables) {
  $event_name = variable_get(_caldav_events_('event_name'));
  $variables['theme_hook_suggestions'] = array("caldav_events_single_$event_name");
  _caldav_events_variables_preprocess($event_name, $variables);
}

function template_preprocess_caldav_events_list(&$variables) {
  $event_name = variable_get(_caldav_events_('event_name'));
  $variables['theme_hook_suggestions'] = array("caldav_events_list_$event_name");
}

function caldav_events_block_info() {
  $blocks = array();

  $event_name = variable_get(_caldav_events_('event_name'));
  if ($event_name) {
    $blocks['list_'.strtolower($event_name)] =
      array(
            'info' => t('List of events: '.$event_name),
            'cache' => DRUPAL_CACHE_PER_ROLE,
            );
  }
  return $blocks;
}

function caldav_events_block_view($delta = '') {
  if (_caldav_events_startsWith($delta, 'list_')) {
    $event_name = variable_get(_caldav_events_('event_name'));
    $block['subject'] = t($event_name.' events');
    if (user_access('access content')) {
      $events = _caldav_events_get_stored_events($event_name);
      if (empty($events)) {
        $block['content'] = '<p>No events found</p>';
      } else {
        $items = array();
        foreach ($events as $e) {
          $event = new VEvent($e['icalendar']);
          $items[] =
            theme(array("caldav_events_single__$event_name", 'caldav_events_single'),
                  _caldav_events_variables_init($event));
        }

        $block['content'] =
          theme(array("caldav_events_list__$event_name", 'caldav_events_list', 'item_list'),
                array('items' => $items));
      }
    }
    return $block;
  }
}

function caldav_events_menu() {
  $ret = array();
  $ret['admin/config/content/caldav_events'] =
    array(
          'title' => 'CalDAV Events Configuration',
          'page callback' => 'drupal_get_form',
          'page arguments' => array('caldav_events_form'),
          'access arguments' => array('access administration pages'),
          'type' => MENU_NORMAL_ITEM,
          );

  return $ret;
}

function caldav_events_form($form, &$form_state) {
  $form =
    array(
          _caldav_events_('server_url') =>
          array(
                '#type' => 'textfield',
                '#title' => t('CalDAV Server URL'),
                '#default_value' => variable_get(_caldav_events_('server_url')),
                '#size' => 80,
                '#description' => t('CalDAV server to connect to'),
                '#required' => true),

          _caldav_events_('server_username') =>
          array(
                '#type' => 'textfield',
                '#title' => t('Username'),
                '#default_value' => variable_get(_caldav_events_('server_username')),
                '#size' => 32,
                '#description' => t('Username to connect to the CalDAV server'),
                '#required' => true),

          _caldav_events_('server_password') =>
          array(
                '#type' => 'password',
                '#title' => t('Password'),
                //Force to write in password again when making changes
                //'#default_value' => variable_get(_caldav_events_('server_password')),
                '#size' => 32,
                '#description' => t('Password to connect to the CalDAV server'),
                '#required' => true),

          _caldav_events_('event_name') =>
          array(
                '#type' => 'textfield',
                '#title' => t('Event Name'),
                '#default_value' => variable_get(_caldav_events_('event_name')),
                '#size' => 32,
                '#description' => t('Search in calendar events containing the given name'),
                '#required' => true),

          _caldav_events_('event_start') =>
          array(
                '#type' => 'textfield',
                '#title' => t('Start'),
                '#default_value' => variable_get(_caldav_events_('event_start')),
                '#size' => 16,
                '#description' => t('Search in calendar events starting from this time'),
                '#required' => true),

          _caldav_events_('event_end') =>
          array(
                '#type' => 'textfield',
                '#title' => t('End'),
                '#default_value' => variable_get(_caldav_events_('event_end')),
                '#size' => 16,
                '#description' => t('Search in calendar events until this time'),
                '#required' => true),

          _caldav_events_('event_node_type') =>
          array(
                '#type' => 'textfield',
                '#title' => t('Event node type'),
                '#default_value' => variable_get(_caldav_events_('event_node_type'), 'page'),
                '#size' => 16,
                '#description' => t('Node type (machine name) of node event to create'),
                '#required' => false),

          _caldav_events_('event_node_author') =>
          array(
                '#type' => 'textfield',
                '#title' => t('Event author'),
                '#default_value' => variable_get(_caldav_events_('event_node_author'), 'admin'),
                '#size' => 16,
                '#description' => t('Author of automatically-created event pages'),
                '#required' => false),

          _caldav_events_('event_email_to') =>
          array(
                '#type' => 'textfield',
                '#title' => t('Email to'),
                '#default_value' => variable_get(_caldav_events_('event_email_to')),
                '#size' => 16,
                '#description' => t('Email address to send events to. If left empty, no email is sent'),
                '#required' => false),
          );

  return system_settings_form($form);
}

function caldav_events_form_validate($form, &$form_state) {
  function fail() {
    variable_set(_caldav_events_('server_data_given'), false);
  }

  $v = $form_state['values'];

  $event_name = $v[_caldav_events_('event_name')];
  if ($event_name != '' && check_plain($event_name) !== $event_name) {
    form_set_error(_caldav_events_('event_name'), t('The event name cannot contain special code'));
    fail();
  }

  if ($v[_caldav_events_('server_url')] && $v[_caldav_events_('server_username')] && $v[_caldav_events_('server_password')] && $v[_caldav_events_('event_name')] && $v[_caldav_events_('event_start')] && $v[_caldav_events_('event_end')]) {
    variable_set(_caldav_events_('server_data_given'), true);
  } else {
    fail();
  }
}

function _caldav_events_create_or_update_event_node($nid, $event_name, $status, $event) {
  if ($nid) {
    $node = node_load($nid);
  } else {
    $node = new stdClass();
    $node->is_new = true;
  }

  $node->language = variable_get('language_default', 'und');
  $node->type = variable_get(_caldav_events_('event_node_type'), 'page');
  node_object_prepare($node);
  $node->name = variable_get(_caldav_events_('event_node_author'), 'admin');
  if ($account = user_load_by_name($node->name)) {
    $node->uid = $account->uid;
    $GLOBALS['user'] = $account; //some other modules may want to read this so force it
  }

  $vars = _caldav_events_variables_init($event);
  $vars = _caldav_events_variables_ui(_caldav_events_variables_preprocess($event_name, $vars));
  _caldav_events_format_event_node($node, $vars);

  $form_id = "{$node->type}_node_form";
  $form_state = array();
  $form_state['node'] = $node;
  $form_state['values']['op'] = t('Save');
  /* If not set, those values of node's are used */
  //$form_state['values']['title'] =;
  //...

  /* Use instead of node_save to fire up form hooks for which other modules listen to, like the
     twitter_post module */
  module_load_include('inc', 'node', 'node.pages');
  drupal_form_submit($form_id, $form_state, $node);
  //node_save($node);

  if (@$node->nid && $to = variable_get(_caldav_events_('event_email_to'))) {
    $params =
      array("nid" => $node->nid,
            "variables" => $vars);

    $message = drupal_mail(_caldav_events(), 'event', $to, language_default(), $params);
    watchdog(_caldav_events(), "Email event to '$to', result: ".$message['result']);
  }

  return $node->nid;
}

function _caldav_events_format_event_node(&$node, $vars) {
  $node->title = t("!status_legend"."!start_date_Md - !summary", $vars);
  $node->body[$node->language][0]['value']   = t("!description", $vars);
  $node->body[$node->language][0]['summary'] = text_summary($vars['!description']);
  //TODO $node->time[$node->language][0]['value']   = start_date_hour24
}

/**
 * Implementation of hook_mail.
 *
 * Format the event email.
 */
function caldav_events_mail($key, &$message, $params) {
  switch($key) {
  case 'event':
    $nodeurl = url('node/'. $params['nid']);
    $vars = $params['variables'];

    $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';
    $message['subject'] = t("!status_legend"."!start_date_Md - !summary", $vars);
    $message['body'][] = implode('<br/>', array(l('Link', $nodeurl), '<p>'.$vars['!description'].'</p>'));

    break;
  default:
    $message['send'] = FALSE;
  }
}

//-------------------------------------------------------------------------
// Cron & Calendar Management
//-------------------------------------------------------------------------

function caldav_events_cron() {
  $queue = DrupalQueue::get('caldav_events_queue_1');
  $queue->createItem('');
}

/**
 * Notify cron quees to run.
 *
 * Cron quees are cron jobts that can take a long time or fail like server requests.
 * @see https://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_cron_queue_info/7
 *
 */
function caldav_events_cron_queue_info() {
  $queues['caldav_events_queue_1'] =
    array(
          'worker callback' => '_caldav_events_read_servers',
          'time' => 20, // Maximum allowed time to run, in seconds
          );
  return $queues;
}

function _caldav_events_read_servers($item) {
  if (variable_get(_caldav_events_('server_data_given'), false)) {
    $event_name = variable_get(_caldav_events_('event_name'));

    $params =
      array (
             'url' => variable_get(_caldav_events_('server_url')),
             'username' => variable_get(_caldav_events_('server_username')),
             'password' => variable_get(_caldav_events_('server_password')),
             'event_name' => $event_name,
             'event_start' => variable_get(_caldav_events_('event_start')),
             'event_end' => variable_get(_caldav_events_('event_end'))
             );

    $previous_events = _caldav_events_get_stored_events($event_name);
    $updated_events = _read_events_from_server($params);

    $meta_events = _check_changes($previous_events, $updated_events);

    $do = function($status) use ($meta_events, &$updated_events, $event_name) {
      foreach ($meta_events[$status] as $key => $e) {
        $event = new VEvent($e['icalendar']);
        $existing_nid = @ $e['keep']['nid'];

        $nid = _caldav_events_create_or_update_event_node($existing_nid, $event_name, $status, $event);
        if ($nid && $status === 'new') {
          $updated_events[$key]['keep']['nid'] = $nid;
        }
      }
    };

    $do('new');
    $do('modified');
    $do('deleted');

    _caldav_events_set_stored_events($event_name, $updated_events);
  }
}

function _caldav_events_events_local_path($event_name) {
  return drupal_get_path('module', 'caldav_events').'/data/'.$event_name.'.bin';
}

function _caldav_events_set_stored_events($event_name, $events) {
  file_put_contents(_caldav_events_events_local_path($event_name), serialize($events));
}

function _caldav_events_get_stored_events($event_name) {
  $file = _caldav_events_events_local_path($event_name);
  if (file_exists($file)) {
    return unserialize(file_get_contents($file));
  } else {
    return array();
  }
}

//-------------------------------------------------------------------------
// Utilities
//-------------------------------------------------------------------------

/**
 * Return this's module name.
 */
function _caldav_events() {
  return 'caldav_events';
}

/**
 * Return this's module name appended by an underscore. Optionally include a sub key string.
 *
 * Use it to create module's keys in forms or variables.
 *
 */
function _caldav_events_($sub = '') {
  return _caldav_events().'_'.$sub;
}

function _caldav_events_startsWith($haystack, $needle){
  return !strncmp($haystack, $needle, strlen($needle));
}

/* ?> Omitted closing tag, as recommended by: https://drupal.org/node/1074362 */