<?php

/**
 * CalDav Events, drupal module
 *
 * Naming Conventions:
 *   * Only lowercase and underscore
 *   * Drupral hooks are named `caldav_events_hookname`
 *   * Private functions are prefixed with '_'
 *   * Public functions (available to other modules) are named `caldav_events_api_functionname`
 *
 */

module_load_include('php', 'caldav_events', 'inc/connect');

/**
 * Implements hook_help.
 *
 * Displays help and module information.
 *
 * @param path
 *   Which path of the site we're using to display help
 * @param arg
 *   Array that holds the current path as returned from arg() function
 */
function caldav_events_help($path, $arg) {
  switch ($path) {
  case "admin/help#caldav_events":
    return '<p>' . t("Write an email (with proper subject) to: juanmi@jmcejuela.com") . '</p>';
    break;
  }
}

function caldav_events_theme() {
  return array(
               'caldav_events_single' =>
               array('template' => 'caldav-events-single',
                     'pattern' => 'caldav_events_single__',
                     'variables' => array('summary' => '', 'description' => '', 'location' => '', 'start_date' => NULL, 'end_date' => NULL, 'attendees' => '')),

               'caldav_events_page' =>
               array('template' => 'caldav-events-page',
                     'pattern' => 'caldav_events_page__',
                     'variables' => array('summary' => '', 'description' => '', 'location' => '', 'start_date' => NULL, 'end_date' => NULL, 'attendees' => '')),

               'caldav_events_list' =>
               array('template' => 'caldav-events-list',
                     'pattern' => 'caldav_events_list__',
                     'variables' => array('items' => array())));
}

function template_preprocess_caldav_events_single(&$variables) {
  $event_name = variable_get(_().'event_name');
  $variables['theme_hook_suggestions'] = array("caldav_events_single_$event_name");
  $summary = $variables['summary'];
  if (preg_match('/^'.$event_name.'\W*(\w.*)$/i', $summary, $matches)) {
    $variables['unprefixed_summary'] = $matches[1];
  } else {
    $variables['unprefixed_summary'] = $summary;
  }
}

function template_preprocess_caldav_events_list(&$variables) {
  $event_name = variable_get(_().'event_name');
  $variables['theme_hook_suggestions'] = array("caldav_events_list_$event_name");
}

function caldav_events_block_info() {
  $blocks = array();

  $event_name = variable_get(_().'event_name');
  if ($event_name) {
    $blocks['list_'.strtolower($event_name)] =
      array(
            'info' => t('List of events: '.$event_name),
            'cache' => DRUPAL_CACHE_PER_ROLE,
            );
  }
  return $blocks;
}

function caldav_events_block_view($delta = '') {
  if (_startsWith($delta, 'list_')) {
    $event_name = variable_get(_().'event_name');
    $block['subject'] = t($event_name.' events');
    if (user_access('access content')) {
      $events = _caldav_events_get_stored_events($event_name);
      if (empty($events)) {
        $block['content'] = '<p>No events found</p>';
      } else {
        $items = array();
        foreach ($events as $e) {
          $event = new VEvent($e['icalendar']);
          $items[] =
            theme(array("caldav_events_single__$event_name", 'caldav_events_single'),
                  array('summary' => $event->summary(),
                        'description' => $event->description(),
                        'location' => $event->location(),
                        'start_date' => $event->start(),
                        'end_date' => $event->end(),
                        'attendees' => $event->attendees()));
        }

        $block['content'] =
          theme(array("caldav_events_list__$event_name", 'caldav_events_list', 'item_list'),
                array('items' => $items));
      }
    }
    return $block;
  }
}

function caldav_events_menu() {
  $ret = array();
  $ret['admin/config/content/caldav_events'] =
    array(
          'title' => 'CalDav Events',
          'page callback' => 'drupal_get_form',
          'page arguments' => array('caldav_events_form'),
          'access arguments' => array('access administration pages'),
          'type' => MENU_NORMAL_ITEM,
          );

  return $ret;
}

function caldav_events_form($form, &$form_state) {
  $form =
    array(
          _().'server_url' =>
          array(
                '#type' => 'textfield',
                '#title' => t('CalDAV Server URL'),
                '#default_value' => variable_get(_().'server_url'),
                '#size' => 80,
                '#description' => t('CalDAV server to connect to'),
                '#required' => true),

          _().'server_username' =>
          array(
                '#type' => 'textfield',
                '#title' => t('Username'),
                '#default_value' => variable_get(_().'server_username'),
                '#size' => 32,
                '#description' => t('Username to connect to the CalDAV server'),
                '#required' => true),

          _().'server_password' =>
          array(
                '#type' => 'textfield',
                '#title' => t('Password'),
                //'#default_value' => variable_get(_().'server_password'), //do
                //not show the password for now
                '#size' => 32,
                '#description' => t('Password to connec to the CalDAV server'),
                '#required' => true),

          _().'event_name' =>
          array(
                '#type' => 'textfield',
                '#title' => t('Event Name'),
                '#default_value' => variable_get(_().'event_name'),
                '#size' => 32,
                '#description' => t('Search in calendar events containing the given name'),
                '#required' => true),

          _().'event_start' =>
          array(
                '#type' => 'textfield',
                '#title' => t('Start'),
                '#default_value' => variable_get(_().'event_start'),
                '#size' => 16,
                '#description' => t('Search in calendar events starting from this time'),
                '#required' => true),

          _().'event_end' =>
          array(
                '#type' => 'textfield',
                '#title' => t('End'),
                '#default_value' => variable_get(_().'event_end'),
                '#size' => 16,
                '#description' => t('Search in calendar events until this time'),
                '#required' => true),
          );

  return system_settings_form($form);
}

function caldav_events_form_validate($form, &$form_state) {
  function fail() {
    variable_set(_().'server_data_given', false);
  }

  $v = $form_state['values'];

  $event_name = $v[_().'event_name'];
  if ($event_name != '' && check_plain($event_name) !== $event_name) {
    form_set_error(_().'event_name', t('The event name cannot contain special code'));
    fail();
  }

  if ($v[_().'server_url'] && $v[_().'server_username'] && $v[_().'server_password'] && $v[_().'event_name'] && $v[_().'event_start'] && $v[_().'event_end']) {
    variable_set(_().'server_data_given', true);
  } else {
    fail();
  }
}

function _caldav_events_create_or_update_event_node($nid, $event_name, $status, $event) {
  if ($nid) {
    $node = node_load($nid);
  } else {
    $node = new stdClass();
    $node->is_new = true;
  }

  $node->language = variable_get('language_default', 'und');
  _caldav_events_api_theme_event_node($event_name, $status, $event, $node);
  if (! @ $node->type) {
    $node->type = 'page';
  }

  node_object_prepare($node);
  node_save($node);

  if (@$node->nid) {
    $params =
      array("nid" => $node->nid,
            "event_name" => $event_name,
            "status" => $status,
            "event" => $event
            );

    drupal_mail(_name(), 'event', 'jmcejuela@gmail.com', language_default(), $params);
  }

  return $node->nid;
}

function caldav_events_mail($key, &$message, $params) {
  switch($key) {
  case 'event':
    switch($params['status']) {
    case 'new':
      $prefix = '';
      break;
    case 'modified':
      $prefix = '(UPDATED) ';
      break;
    case 'cancelled':
      $prefix = '(CANCELLED) ';
      break;
    }

    $event = $params['event'];
    $nodeurl = url('node/'. $params['nid']);

    $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';

    $message['subject'] = t($prefix.$event->start()->format('M d').' - '.$event->summary());
    $message['body'][] = implode('<br/>', array(l('==> Link', $nodeurl), '<p>'.$event->description().'</p>'));

    break;
  default:
    $message['send'] = FALSE;
  }
}

function _caldav_events_api_theme_event_node($event_name, $status, $event, &$node) {
  switch($status) {
  case 'new':
    $prefix_title = '';
    break;
  case 'modified':
    $prefix_title = '(UPDATED) ';
    break;
  case 'cancelled':
    $prefix_title = '(CANCELLED) ';
    break;
  }

  $node->title = $prefix_title.$event->start()->format('M d').' - '.$event->summary();
  //
  $node->body[$node->language][0]['value']   = $event->description();
  $node->body[$node->language][0]['summary'] = text_summary($event->description());
  //$node->body[$node->language][0]['format']  = 'php_code';
  //
  //$node->time[$node->language][0]['value']   = $event->start()->format('H:m');
}

function caldav_events_cron() {
  $queue = DrupalQueue::get('caldav_events_queue_1');
  $queue->createItem('');
}

/**
 * Notify cron quees to run.
 *
 * Cron quees are cron jobts that can take a long time or fail like server requests.
 * @see https://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_cron_queue_info/7
 *
 */
function caldav_events_cron_queue_info() {
  $queues['caldav_events_queue_1'] =
    array(
          'worker callback' => '_caldav_events_read_servers',
          'time' => 20, // Maximum allowed time to run, in seconds
          );
  return $queues;
}

function _caldav_events_read_servers($item) {
  if (variable_get(_().'server_data_given', false)) {
    $event_name = variable_get(_().'event_name');

    $params =
      array (
             'url' => variable_get(_().'server_url'),
             'username' => variable_get(_().'server_username'),
             'password' => variable_get(_().'server_password'),
             'event_name' => $event_name,
             'event_start' => variable_get(_().'event_start'),
             'event_end' => variable_get(_().'event_end')
             );

    $previous_events = _caldav_events_get_stored_events($event_name);
    $updated_events = _read_events_from_server($params);

    $meta_events = _check_changes($previous_events, $updated_events);

    $do = function($status) use ($meta_events, &$updated_events, $event_name) {
      foreach ($meta_events[$status] as $key => $e) {
        $event = new VEvent($e['icalendar']);
        $existing_nid = @ $e['keep']['nid'];

        $nid = _caldav_events_create_or_update_event_node($existing_nid, $event_name, $status, $event);
        if ($nid && $status !== 'deleted') {
          $updated_events[$key]['keep']['nid'] = $nid;
        }
      }
    };

    $do('new');
    $do('modified');
    $do('deleted');

    _caldav_events_set_stored_events($event_name, $updated_events);
  }
}

function _caldav_events_events_local_path($event_name) {
  return drupal_get_path('module', 'caldav_events').'/data/'.$event_name.'.bin';
}

function _caldav_events_set_stored_events($event_name, $events) {
  file_put_contents(_caldav_events_events_local_path($event_name), serialize($events));
}

function _caldav_events_get_stored_events($event_name) {
  $file = _caldav_events_events_local_path($event_name);
  if (file_exists($file)) {
    return unserialize(file_get_contents($file));
  } else {
    return array();
  }
}

//-------------------------------------------------------------------------
// Utilities
//-------------------------------------------------------------------------

/**
 * Return this's module name
 */
function _name() {
  return 'caldav_events';
}

/**
 * Return this's module name appended by an underscore.
 *
 * Use it to form module's keys in forms or variables.
 *
 */
function _() {
  return _name().'_';
}

function _startsWith($haystack, $needle){
  return !strncmp($haystack, $needle, strlen($needle));
}

/* ?> Omitted closing tag, as recommended by: https://drupal.org/node/1074362 */